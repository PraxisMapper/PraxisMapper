<html>
<head>
    @* Local resource links *@
    <link rel="stylesheet" href="~/Content/leaflet.css" />
    <script src="~/Content/Scripts/leaflet.js"></script>
    <script src="~/Content/Scripts/PlusCodes.js"></script>
    <style>
        .palette {display:flex; flex-wrap:wrap; border-width: 3px; border-radius: 8px;width: 256px; padding: 10px; background-color:whitesmoke}
        .palette-entry { border-color:dimgrey; border-width:3px; border-radius:8px; width:48px; height:48px;min-width:32px; }
        .palette-entry:active{ border-color:black border-width:5px;}
    </style>
</head>
<body>
    <div id="mapid" style="height:100%; z-index:20;">
    </div>
    <script type="text/javascript">
        //This is the Splatter web interface/toy. No login required.
        var serverKey = "testingKey"; //TODO: probably drop this.
        var baseSite = window.location.href.toLowerCase().split("/splatter")[0];
        console.log(baseSite);
        var url = baseSite + '/{id}/{z}/{x}/{y}.png?PraxisAuthKey=' + serverKey;
        var baseData = L.tileLayer(url, { id: "MapTile/Slippy/mapTiles", tileSize: 512, maxZoom: 20, minZoom: 3, zoomOffset: -1 });
        var splatterData = L.tileLayer(url, { id: "Splatter/Slippy", tileSize: 512, maxZoom: 20, minZoom: 3, zoomOffset: -1 });
        var splatterTiles = [];
        var mymap = L.map('mapid');
        baseData.addTo(mymap);
        splatterData.addTo(mymap);
        var currentColorId = -1;
        var callsTotal = 0;

        var autoRefresh = setInterval(redraw, 15000);

        splatterData.on('tileload', function (ev) {
            console.log("LOAD:");
            if (ev.coord == null)
                return;
            splatterTiles[ev.coords.x + "|" + ev.coords.y + "|" + ev.coord.z] = ev.tile;
        });
        splatterData.on('tileunload', function (ev) {
            console.log("UNLOAD:");
            if (ev.coord == null)
                return;
            delete splatterTiles[ev.coords.x + "|" + ev.coords.y + "|" + ev.coord.z];
        });

        var startLat = 0;
        var startLon = 0;
        fetch(baseSite + "/Server/ServerBounds", { headers: { 'PraxisAuthKey': serverKey } })
            .then(b =>
                b.text().then(bb => {
                    var points = bb.split("|");
                    for (var i = 0; i < 4; i++)
                        points[i] = points[i] * 1; //quick conversion to numbers from strings.
                    startLat = points[0] + (points[2] - points[0]) / 2;  //south + (north - south) / 2
                    startLon = points[1] + (points[3] - points[1]) / 2; //west + (east - west) / 2
                    console.log("Starting point set to " + startLat + "," + startLon + " from data " + bb);
                    mymap.setView([startLat, startLon], 15);
                })
            );

        var paletteInnerData = "";
        //the div that holds all the color choice divs.
        let palette = L.Control.extend({
            onAdd: function (map) {
                var div = L.DomUtil.create('div', "palette");
                div.id = "palette";
                div.innerHTML = paletteInnerData;
                return div;
            },
        });

        function parseStyle(styleData) { 
            console.log("parsing style");
            styleData.forEach(sd => { 
                console.log(sd.name);
                if (sd.name != "background") {
                    paletteInnerData += "<div class='palette-entry' onclick='currentColorId=" + sd.name + ";preventDefault();' style='background-color:" + sd.paintOperations[1].htmlColorCode + "'></div> ";
                }
            });

            var activePalette = new palette({ position: 'topleft' });
            activePalette.addTo(mymap);
        }

        fetch(baseSite + "/StyleData/json/splatter", { headers: { 'PraxisAuthKey': serverKey }, })
            .then(s => {  
                s.json().then(ss => { parseStyle(ss); });
            });

        mymap.on('click', function (mouseEvent) { 
            var plusCode = OpenLocationCode.encode(mouseEvent.latlng.lat, mouseEvent.latlng.lng);
            plusCode = plusCode.replace("+", "");
            console.log(plusCode);
            //now call splat. A Cell10 is about 20 pixels at zoom 15.7, which is the radius of 1 on the server-side. 
            //Radius doesn't scale out as much as expected in Cell10s. Boosting it up some for the toy.
            var radius = (15.7 / mymap._zoom) * (mymap._layersMaxZoom - mymap._zoom);
            var scale2 = 1;
            //Good enough for now. Hand-jammed values after scaling mathematically didn't quite work as expected.
            switch(mymap._zoom)
            {
                case 20:
                case 19:
                case 18:
                    scale2 = 0.8;
                    break;
                case 17:
                case 16:
                case 15:
                    scale2 = 1;
                    break;
                case 14:
                case 13:
                case 12:
                    scale2 = 4;
                    break;
                case 11:
                case 10:
                case 9:
                    scale2 = 16;
                    break;
                case 8:
                case 7:
                case 6:
                    scale2 = 500;
                    break;
                case 5:
                case 4:
                case 3:
                case 2:
                    scale2 = 1000;
                    break;
            }
            radius *= scale2;
            
            fetch(baseSite + "/Splatter/FreeSplat/" + plusCode + "/" + radius + "/" + currentColorId, { method: "PUT", headers: { 'PraxisAuthKey': serverKey } })
                .then(s => s.text().then(ss => { 
                    //todo: get new tile here. we clicked, we know this one needs updated. TileEvent.coords would have what i want, but i got a mouseEvent.
                    //May just refresh the whole layer? I could invalidate the individual tile with its x/y/z coords and the array. Maybe mouseEvent.target has it?
                    redraw(); //This does make the screen blink a bit as tiles are dropped and reloaded
                }));

        });

        function redraw()
        {
            callsTotal++;
            splatterData.setUrl(baseSite + '/Splatter/Slippy/{z}/{x}/{y}.png?PraxisAuthKey=' + serverKey + "&t=" + callsTotal);
            splatterData.redraw();
        }

        function reloadOne(x, y, z) { 
            if (splatterTiles[x + "|" + y + "|" + z] != null)
            {
                callsTotal++;
                splatterTiles[x + "|" + y + "|" + z].src += "&t=" + callsTotal;
            }
        }

    </script>
</body>
</html>