{
  ///////////////////////////
  //IIS does not use these settings. These are for running PraxisMapper.exe by itself with specific options.
  //By default, the app defaults to HTTP on 5000 and attempt to grab a development certificate for HTTPS on 5001
  //If you want to use your own ports or certs, uncomment and change the block below:
  //"Kestrel": {
  //  "Endpoints": {
  //    "Http": {
  //      "Url": "http://0.0.0.0:5000"
  //    },
  //    "HttpsInlineCertFile": {
  //      "Url": "https://0.0.0.0:5001",
  //      "Certificate": {
  //        "Path": "<path to .pfx file>",
  //        "Password": "<certificate password>"
  //      }
  //    }
  //  }
  //},
  ///////////////////////////////

  // --->   \\!!!!!!!!! HELLO NEW USER !!!!!!!!!!//  <---
  //If you're using the automated setup process, you want to set this number to the OpenStreetMap ID of the relation you're limiting your server to.
  //Leaving this on 0 will import all entries from the PBF file, and it is fairly easy for LocalDB to run out of space trying to import even a small PBF file.
  "useRelationForBounds": 0,
  //!!!!!!!! <----

  ///////////////////////////////////
  //Fairly standard logging values.
  "Logging": {
    "LogLevel": {
      "Default": "Warning",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Warning"
    }
  },
  /////////////////////

  /////////////////////////////
  //Endpoint toggles. Set to false to disable calls directly to the controller in question.
  //enableMapTileEndpoints should remain true, since there's currently not an efficient way for PraxisMapper to relay raw data for a client to render tiles.
  //enableDataEndpoints : true allows client apps to do most of the work instead of a server plugin, which may be helpful for making quick prototypes but may allow data collisions.
  "enableDataEndpoints": true,
  "enableStyleDataEndpoints": true,
  "enableMapTileEndpoints": true,
  ////////////////////////////////////


  //////////////////////////////////////
  //Database values. Use only one of these pairs of values.
  //LocalDB: A self-contained SQL Server without any configuration or external connectivity. Set as the default for fastest and simplest setup.
  "DbMode": "LocalDB",
  "DbConnectionString": "Server=(localdb)\\Praxis;Integrated Security=true;",

  //Micosoft SQL Server: Well supported commercial database option. Eats a LOT of disk space, particularly on logging.
  //"dbMode": "SQLServer", //SQL Server has not been tested lately but likely works with some small bugs.
  //"dbConnectionString": "Data Source=localhost\\SQLDEV;UID=PraxisService;PWD=test;Initial Catalog=Praxis;",

  //MariaDB: Free and open-source database. Simpler than SQL Server, but has all the necessary features for PraxisMapper. Suggested for most users that need more than LocalDB.
  //"dbMode": "MariaDB",
  //"dbConnectionString": "server=localhost;database=praxis;user=root;password=test;",

  //Postgres has not been thoroughly tested, and likely does not complete setup automatically. Entities may work on a manually completed database. 
  //"dbMode": "PostgreSQL", 
  //"dbConnectionString": "server=localhost;database=praxis;user=root;password=test;",
  ////////////////////////////////////////////////

  //////////////////////////////////////////////////////////
  //Feature toggles.
  //if true, saves a record to the PerformanceData table for each network request received. Should not remain enabled perpetually.
  //use this to track down performance issues with plugins or the server. Is a small performance hit on it's own when enabled.
  "enablePerformanceTracker": "false",
  //If true, messages that would be written to a console window are instead saved to a text file in the same directory as PraxisMapper.exe
  "enableFileLogging": "false",
  //If true, saves each maptile image and a small amount of metadata to the MapTiles (or SlippyMapTiles) tables. If false, map tiles are drawn on every request.
  "saveMapTiles": "true",
  //Anticheat code is incomplete at this point in time. Enabling this allows for a very simple check, but it's effectively useless.
  "enableAntiCheat": false,
  //If true, DLLs in the /plugins folder will be loaded and attached to the server. If false, they will be skipped and PraxisMapper will be limited to MapTiles, Data, and SecureData APIs.
  "enablePlugins": true,
  //If true, PraxisMapper stores as much recent data as possible in its IMemoryCache to increase performance at the cost of additional RAM usage.
  "enableServerCaching": false,
  ///////////////////////

  /////////////////////////
  //Other Settings
  //How much to multiply the size of a gameplay map tile by. At 1, Cell8 sized plus code images are 80x100, making each pixel a single Cell11. Defaults to 4, for 320x400px tiles.
  "mapTileScaleFactor": 4,
  //How large to render Slippy tiles (Google Maps or Leaflet type viewers, that 'slip' around as you drag the mouse). Usually 256 or 512. PraxisSlippy plugin expects 512.
  "slippyTileSize": 512,
  //How much additional area to load when drawing map tiles. Necessary to have points on the edge of a map tile draw correctly. Defaults to a single Cell10 width.
  "AreaBuffer": 0.000125,
  //If true, PraxisMapper ignores the database and uses only the default styles. False reads all styles present in the database, as expected.
  "ForceStyleDefaults": false,
  //When creating images, load this IMapTiles interface to do it. Valid options are "SkiaSharp" and "ImageSharp".
  //SkiaSharp is faster and generally looks better, but only works on Windows because of native dependencies. ImageSharp works on everything, but about 30% of the speed.
  "MapTilesEngine": "SkiaSharp",
  //PraxisMapper normally checks most API requests to ensure they're in-bounds before processing it completely. Set this to true to allow data from outside the server bounds.
  "DisableBoundsCheck": false,
  //Set to any non-empty string value to make all endpoints return status 500 to non-admins. Admins will be able to use the server as normal for testing.
  //This can also be set while the server is running by calling Admin/MaintMessage/{message}
  "maintenanceMessage": "",
  //If a requested image would be over this length in pixels on either side, the image is scaled to make it's longest side this value.
  "imageMaxSide": 4000,
  //If a requested image would have more pixels than this value, it is scaled down to fit so it's longest size is imageMaxSize pixels.
  "maxImagePixels": 16000000,
  ///////////////////////////

  //////////////////////////////
  //Security settings
  //If true, all requests need to have a header or query string key of PraxisAuthKey, and its value needs to match ServerAuthKey for the request to be processed.
  "enableHeaderCheck": "false",
  //The value used to validate requests if enableHeaderCheck is true
  "serverAuthKey": "testingKey",
  //If true, require a valid account and a successful login to access most endpoints. Plugins can add their own endpoints to that allow-list.
  "enableAuthCheck": "false",
  //how much time is taken to generate a password, scaling exponentially. Do not set below 10.
  "PasswordRounds": 13,
  //Once a player has logged in, their access token remains valid for this many seconds.
  "authTimeoutSeconds": 1800,
  //If enableAuthCheck is true, requests to the paths below will still be allowed in. Important for calls that don't require a login to succeed.
  "allowList": "/Server/Test,/Server/Login,/Server/CreateAccount,/Server/ServerBounds,/Server/GdprExport,/Content",

  /////////////////////////////

  ///////////////////////////////////
  //Not currently supported, may be removed or implemented in the future:
  "AllowedHosts": "*", //The app does not attempt to act like a firewall.
  "adminPwd": "setThisToBeAGoodPassword" //Apps currently determine admin rights by the authenticationData table, or by a request from localhost.
  ///////////////////////////////
}
